version: "3.1"

services:
  db:
    image: postgres:12.4
    container_name: database
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 5s
      timeout: 5s
      retries: 20
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: test-db

  rest:
    image: express-cuts-rest-api:latest
    build:
      context: ../express_cut
    container_name: express-API
    healthcheck:
      test: curl http://127.0.0.1:8000/api
      interval: 5s
      timeout: 5s
      retries: 30
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DJANGO_ALLOWED_HOSTS=*
      # - DJANGO_SECRET_KEY="mim-1fbk4#ih!%awlxv17s_a835bpc&djw0y#4@c%&h-*eovba"
      - DJANGO_CORS_ORIGIN_WHITELIST=http://*
      - DEBUG=true
      - CORS_ALLOW_ALL=true
      # - DJANGO_TIME_ZONE=America/Puerto_Rico

      # Connection settings
      - DATABASE_NAME=test-db
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=password
      - DATABASE_HOST=database
      - DATABASE_PORT=5432

      # For initial populating DB
      - GENERATE_TEST_DATA=true

  ui:
    image: express-cuts-ui:latest
    build:
      context: ../frontend
    container_name: express-UI
    ports:
      - 8080:80
    healthcheck:
      test: curl http://127.0.0.1:80/login
      interval: 5s
      timeout: 5s
      retries: 50
    depends_on:
      rest:
        condition: service_healthy
    environment:
      - REST_API_URI=http://localhost:8080/api/ # Run locally
      # - REST_API_URI=http://ui:80/api/ # Run on containers
    volumes:
      - "./frontend/:/etc/nginx/conf.d/"

  tester:
    # Create image from Dockerfile if image not created.
    # In script we should delete the image after testing
    build: .
    image: verification-tests:latest
    container_name: express-TEST
    depends_on:
      ui:
        condition: service_healthy
    environment:
      - REST_API_URI=http://rest:8000
      - EXPRESS_UI_URL=http://ui:80
      - SELENIUM_HUB_URL=http://selenium-hub:4444/wd/hub
    volumes:
      - "./docker-test-out:/output/reports/"

  #### SELENIUM Containers

  selenium-hub:
    image: selenium/hub:4.0.0-alpha-7-prerelease-20200904
    container_name: selenium-hub
    # ports:
    #   - "4442:4442"
    #   - "4443:4443"
    #   - "4444:4444"

  chrome:
    image: selenium/node-chrome:4.0.0-alpha-7-prerelease-20200904
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
    # ports:
    #   - "6900:5900"